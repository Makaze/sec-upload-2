import*as e from"react";import{Logger as i}from"aws-amplify";import{ComponentClassNames as s,VisuallyHidden as r}from"@aws-amplify/ui-react";import{useDropZone as o}from"./hooks/useDropZone/useDropZone.mjs";import{useStorageManager as t}from"./hooks/useStorageManager/useStorageManager.mjs";import{useUploadFiles as l}from"./hooks/useUploadFiles/useUploadFiles.mjs";import{FileStatus as a}from"./types.mjs";import{Container as n}from"./ui/Container/Container.mjs";import{DropZone as m}from"./ui/DropZone/DropZone.mjs";import{FileList as p}from"./ui/FileList/FileList.mjs";import{FileListHeader as c}from"./ui/FileListHeader/FileListHeader.mjs";import{FilePicker as u}from"./ui/FilePicker/FilePicker.mjs";import{checkMaxFileSize as d}from"./utils/checkMaxFileSize.mjs";import{defaultStorageManagerDisplayText as f}from"./utils/displayText.mjs";import{filterAllowedFiles as F}from"./utils/filterAllowedFiles.mjs";import"tslib";const g=new i("Storage.StorageManager");const U=Object.assign(e.forwardRef((function({acceptedFileTypes:i=[],accessLevel:U,defaultFiles:h,displayText:j,isResumable:x=!1,maxFileCount:S,maxFileSize:y,onUploadError:E,onUploadSuccess:k,onFileRemove:C,onUploadStart:L,showThumbnails:T=!0,processFile:b,components:v,provider:D,path:P},w){U&&S||g.warn("FileUploader requires accessLevel and maxFileCount props");const M=Object.assign({Container:n,DropZone:m,FileList:p,FilePicker:u,FileListHeader:c},v),R=void 0===S||"number"==typeof S&&S>1,O=Object.assign(Object.assign({},f),j),{getFileSizeErrorText:Z}=O,H=e=>d({file:e,maxFileSize:y,getFileSizeErrorText:Z}),{addFiles:z,clearFiles:A,files:I,removeUpload:$,setUploadingFile:q,setUploadPaused:N,setUploadProgress:B,setUploadSuccess:G,setUploadResumed:J}=t(h);e.useImperativeHandle(w,(()=>({clearFiles:A})));const K=o({onChange:e=>{const{files:s}=e.dataTransfer;if(!s||0===s.length)return;const r=F(Array.from(s),i);z({files:r,getFileErrorMessage:H})}});l({accessLevel:U,files:I,isResumable:x,maxFileCount:S,onUploadError:E,onUploadSuccess:k,onUploadStart:L,setUploadingFile:q,setUploadProgress:B,setUploadSuccess:G,processFile:b,provider:D,path:P});const Q=0!==I.length&&I.every((e=>(null==e?void 0:e.status)===a.UPLOADED)),V=I.filter((e=>e.progress<100)).length>S,W=I.filter((e=>(null==e?void 0:e.status)===a.UPLOADED)).length,X=I.length-W,Y=I.length>0,_=e.useRef(null);return e.createElement(M.Container,{className:`${s.StorageManager} ${Y?s.StorageManagerPreviewer:""}`},e.createElement(M.DropZone,Object.assign({},K,{displayText:O}),e.createElement(e.Fragment,null,e.createElement(M.FilePicker,{onClick:function(){_.current&&(_.current.click(),_.current.value="")}},O.browseFilesText),e.createElement(r,null,e.createElement("input",{type:"file",tabIndex:-1,ref:_,onChange:e=>{const{files:i}=e.target;i&&0!==i.length&&z({files:Array.from(i),getFileErrorMessage:H})},multiple:R,accept:i.join(",")})))),Y?e.createElement(M.FileListHeader,{allUploadsSuccessful:Q,displayText:O,fileCount:I.length,remainingFilesCount:X}):null,e.createElement(M.FileList,{displayText:O,files:I,isResumable:x,onCancelUpload:({id:e,uploadTask:i})=>{i.pause(),$({id:e})},onDeleteUpload:({id:e})=>{if($({id:e}),"function"==typeof C){const i=I.find((i=>i.id===e));i&&C({key:i.key})}},onResume:({id:e,uploadTask:i})=>{i.resume(),J({id:e})},onPause:({id:e,uploadTask:i})=>{i.pause(),N({id:e})},showThumbnails:T,hasMaxFilesError:V,maxFileCount:S}))})),{Container:n,DropZone:m,FileList:p,FileListHeader:c,FilePicker:u});export{U as StorageManager};
